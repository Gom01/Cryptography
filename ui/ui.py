# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtWidgets, uic
from pathlib import Path

from src.sender import create_msg

from threading import Thread
from pathlib import Path

from PyQt6 import QtWidgets, uic

from src.sender import create_msg
from src.receiver import receive_msg
from src.network import *

class Ui(QtWidgets.QMainWindow):
    encoding_type = "No encoding"

    def __init__(self):
        self.encoding_type = "No encoding"
        self.decoding_value = ""

        super(Ui, self).__init__() # Call the inherited classes __init__ method
        uic.loadUi(Path(__file__).parent / 'window.ui', self) # Load the .ui file
        self.sendButton.clicked.connect(self.isClicked)
        self.encodingValue.setVisible(False) #Visibility of encodingValue
        self.lblEncodingValue.setVisible(False)

        self.rbtnNoEncode.toggled.connect(self.is_Checked)
        self.rbtnVigenere.toggled.connect(self.is_Checked)
        self.rbtnRSA.toggled.connect(self.is_Checked)
        self.rbtnShift.toggled.connect(self.is_Checked)

        self.network = Network()
        self.socket_instance = self.network.get_socket_instance()
        Thread(target=self.handle_messages).start()

        self.show()  # Show the GUI

    def handle_messages(self):
        while True:
            byte_data = self.socket_instance.recv(1024) # receive response
            self.lstReceiveNoDecode.addItem(str(byte_data))
            data = receive_msg(byte_data, self.encoding_type, self.decoding_value)
            self.lstReceive.addItem(str(data))
        
    def isClicked(self):
        message = self.messageContainer.toPlainText()
        value = self.encodingValue.text()

        print(f"Message : {message} Endoding value : {value} Encoding type : {self.encoding_type}")
        self.messageContainer.clear()
        self.encodingValue.clear()
        create_msg(message, 't', self.encoding_type, value)

        self.decoding_value = value
        print(f"Message : {message} Endoding value : {value} Encoding type : {self.encoding_type}")
        self.messageContainer.clear()
        self.encodingValue.clear()
        final_message = create_msg(message, 't', self.encoding_type, value)
        self.network.send_message(final_message)

    def is_Checked(self):
        rb = self.sender()
        if rb.text() == "No encoding":
            self.encoding_type = "No encoding"
            self.encodingValue.setVisible(False)
            self.lblEncodingValue.setVisible(False)
        else:
            self.encodingValue.setVisible(True)
            self.lblEncodingValue.setVisible(True)
        
        if rb.text() == "Shift":
            self.encoding_type = "shift"
        elif rb.text() == "Vigenere":
            self.encoding_type = "vigenere"
        elif rb.text() == "RSA":
            self.encoding_type = "rsa"
